{"version":3,"sources":["redux/reducer/iot.js","redux/reducer/auth.js","redux/reducer/index.js","redux/action/types.js","redux/store/store.js","config/api.js","redux/action/auth.js","component/Login/Login.js","component/Register/Register.js","component/LandingPage/LandingPage.js","component/PostData/PostData.js","redux/action/iot.js","component/Home/Home.js","App.js","serviceWorker.js","index.js","img/logo.png"],"names":["initialState","loading","data","data_userId","error","token","localStorage","getItem","isAuthenticated","user","combineReducers","Iot","state","action","type","payload","Auth","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","API","axios","create","baseURL","setAuthToken","defaults","headers","common","loadUser","dispatch","a","get","res","connect","auth","handleLogin","email","password","config","body","JSON","stringify","post","massage","useState","formData","setFormData","onChange","e","target","name","value","onSubmit","preventDefault","className","placeholder","handleRegister","fullname","phone","console","log","LandingPage","setHandleLogin","src","Logo","style","height","width","paddingTop","onClick","postData","text","handleLogout","setData","Data","display","paddingLeft","paddingRight","navigator","clipboard","writeText","getDataId","id","editData","patch","getDataUserId","X","setX","useEffect","Dataa","map","HandleEdit","background","minWidth","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.c98b88db.chunk.js","sourcesContent":["import {\r\n  GET_DATA_SUCCESS,\r\n  GET_DATA_FAIL,\r\n\r\n  POST_DATA_FAIL,\r\n  POST_DATA_SUCCESS,\r\n\r\n  EDIT_DATA_FAIL,\r\n  EDIT_DATA_SUCCESS,\r\n\r\n  GET_DATA_ID_FAIL,\r\n  GET_DATA_ID_SUCCESS,\r\n\r\n  DELETE_DATA_SUCCESS,\r\n  DELET_DATA_FAIL,\r\n\r\n  GET_DATA_USER_ID_SUCCESS,\r\n  GET_DATA_USER_ID_FAIL\r\n    \r\n} from \"../action/types\"\r\n\r\nconst initialState = {\r\n    loading: true,\r\n    data: [],\r\n    data_userId:[],\r\n    error:null,\r\n  };\r\n\r\n  export default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n  \r\n    switch (type) {\r\n      case GET_DATA_ID_SUCCESS:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          data: payload,\r\n          error:null\r\n        };\r\n     case GET_DATA_ID_FAIL:\r\n       return{\r\n         ...state,\r\n         loading:false,\r\n         data:[],\r\n         error:payload\r\n       }\r\n      case GET_DATA_USER_ID_SUCCESS:\r\n        return{\r\n          ...state,\r\n          loading:false,\r\n          data_userId:payload,\r\n          error:null\r\n        }\r\n     case POST_DATA_SUCCESS:\r\n     case POST_DATA_FAIL:\r\n     case EDIT_DATA_SUCCESS:\r\n     case EDIT_DATA_FAIL:\r\n    default:\r\n        return state;\r\n    }\r\n  }\r\n  ","import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    CLEAR_PROFILE\r\n  } from \"../action/types\";\r\n\r\n  const initialState = {\r\n    token: localStorage.getItem(\"token\"),\r\n    isAuthenticated: null,\r\n    loading: true,\r\n    user: null,\r\n    error:null,\r\n    token:null\r\n  };\r\n  \r\n  export default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n      case USER_LOADED:\r\n        return {\r\n          ...state,\r\n          isAuthenticated: true,\r\n          loading: false,\r\n          user: payload,\r\n        };\r\n      case REGISTER_SUCCESS:\r\n      case LOGIN_SUCCESS:\r\n        localStorage.setItem(\"token\", payload.token);\r\n        return {\r\n          ...state,\r\n          isAuthenticated: true,\r\n          loading: false,\r\n          error:null,\r\n          token:payload.token\r\n        };\r\n      case REGISTER_FAIL:\r\n        return{\r\n          ...state,\r\n          error:payload\r\n        }\r\n      case AUTH_ERROR:\r\n      case LOGIN_FAIL:\r\n        return{\r\n          ...state,\r\n          error: payload,\r\n        }\r\n      case LOGOUT:\r\n        localStorage.removeItem(\"token\");\r\n        return {\r\n          ...state,\r\n          token: null,\r\n          isAuthenticated: false,\r\n          loading: false,\r\n          user: null,\r\n        };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }","import { combineReducers } from \"redux\";\r\n\r\n\r\nimport Iot from \"./iot\";\r\nimport Auth from \"./auth\"\r\n\r\n\r\nexport default combineReducers({Iot,Auth});","export const POST_DATA_SUCCESS = 'POST_DATA_SUCCESS';\r\nexport const POST_DATA_FAIL = \"POST_DATA_FAIL\";\r\n\r\nexport const GET_DATA_SUCCESS = \"GET_DATA_SUCCESS\";\r\nexport const GET_DATA_FAIL = \"GET_DATA_FAIL\";\r\n\r\nexport const DELETE_DATA_SUCCESS = \"DELET_DATA_SUCCESS\";\r\nexport const DELET_DATA_FAIL = \"DELET_DATA_FAIL\";\r\n\r\nexport const GET_DATA_ID_SUCCESS = \"GET_DATA_ID_SUCCESS\";\r\nexport const GET_DATA_ID_FAIL = \"GET_DATA_ID_FAIL\";\r\n\r\nexport const EDIT_DATA_SUCCESS = \"EDIT_DATA_SUCCESS\";\r\nexport const EDIT_DATA_FAIL = \"EDIT_DATA_FAIL\";\r\n\r\n\r\n\r\nexport const GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\r\nexport const GET_USER_FAIL = \"GET_USER_FAIL\"\r\n\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\n\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const CLEAR_PROFILE = 'CLEAR_PROFILE';\r\n\r\nexport const USER_LOADED = 'USER_LOADED';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\n\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\n\r\nexport const GET_DATA_USER_ID_SUCCESS = \"GET_DATA_USER_ID_SUCCESS\";\r\nexport const GET_DATA_USER_ID_FAIL = \"GET_DATA_USER_IS_FAIL\"","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducer';\r\n\r\nconst initialState = {}; \r\n\r\nconst middleware = [ thunk ];\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tinitialState,\r\n\tcomposeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import axios from 'axios';\r\n// Set config defaults when creating the instance\r\nexport const API = axios.create({\r\n\tbaseURL: 'https://fakhrilak-iotku.herokuapp.com/iot/v1'\r\n\t//baseURL: 'http://localhost:5000/api/ts-009/'\r\n});\r\n\r\nexport const setAuthToken = (token) => {\r\n\tif (token) {\r\n\t\tAPI.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n\t} else {\r\n\t\tdelete API.defaults.headers.common['Authorization'];\r\n\t}\r\n};","import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    CLEAR_PROFILE,\r\n  } from \"./types\";\r\n\r\n\r\nimport { API, setAuthToken } from \"../../config/api\";\r\n\r\nexport const loadUser = () => async (dispatch) => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await API.get(\"/auth\");\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: AUTH_ERROR,\r\n    });\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const handleRegister = (\r\n  email,\r\n  password,\r\n  fullname,\r\n  phone\r\n) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const body = JSON.stringify({\r\n    email,\r\n    password,\r\n    fullname,\r\n    phone,\r\n  });\r\n\r\n  try {\r\n    const res = await API.post(\"/register\", body, config);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data.data,\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n      payload: err\r\n    });\r\n  }\r\n};\r\n\r\nexport const handleLogin = (email, password) => async (\r\n  dispatch\r\n) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const body = JSON.stringify({ email, password });\r\n  try {\r\n    const res = await API.post(\"/login\", body, config);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data.data,\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n      payload: err.massage\r\n    });\r\n  }\r\n};\r\n\r\nexport const handleLogout = () =>async (dispatch) => {\r\n\r\n    dispatch({\r\n    type: CLEAR_PROFILE,\r\n    });\r\n    dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};","import React,{useState} from 'react'\r\nimport {handleLogin}from \"../../redux/action/auth\"\r\nimport {connect}from \"react-redux\"\r\nconst Login = ({handleLogin}) => {\r\n\r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n      });\r\n    \r\n    const { email, password } = formData;\r\n\r\n    const onChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        handleLogin(email, password);\r\n      };\r\n  return (\r\n    <div>\r\n        <form onSubmit={(e) => onSubmit(e)}>\r\n              <div className='form-group'>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    value={email}\r\n                    name=\"email\"\r\n                    onChange={(e) => onChange(e)}\r\n                    className='custom-input'\r\n                    />\r\n              </div>\r\n              <div className='form-group'>\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    name=\"password\"\r\n                    onChange={(e) => onChange(e)}\r\n                    placeholder='Password'\r\n                    className='custom-input'\r\n                    />\r\n              </div>\r\n              <div className='form-submit'>\r\n                  <button\r\n                    className='btn-submit'\r\n                  >\r\n                      LOGIN\r\n                  </button>\r\n              </div>            \r\n          </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n  });\r\n  \r\n  export default connect(mapStateToProps, { handleLogin })(Login);\r\n","import React,{useState} from 'react'\r\nimport { handleRegister } from \"../../redux/action/auth\";\r\nimport { connect } from \"react-redux\";\r\nconst Register = ({handleRegister}) => {\r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        fullname: \"\",\r\n        phone: \"\"\r\n      });\r\n    \r\n      const onChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n      };\r\n\r\n      const { email, password, fullname, phone } = formData;\r\n      console.log(email)\r\n      const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        handleRegister(\r\n          email,\r\n          password,\r\n          fullname,\r\n          phone\r\n        );\r\n        console.log(\"test\")\r\n      };\r\n  return (\r\n    <div>\r\n      <form onSubmit={(e)=>onSubmit(e)}>\r\n              <div className='form-group'>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder='Full Name'\r\n                    className='custom-input'\r\n                    value={fullname}\r\n                    name=\"fullname\"\r\n                    onChange={(e) => onChange(e)}\r\n                    />\r\n              </div>\r\n              <div className='form-group'>\r\n                  <input\r\n                    type=\"email\"\r\n                    placeholder='Email'\r\n                    className='custom-input'\r\n                    value={email}\r\n                    name=\"email\"\r\n                    onChange={(e) => onChange(e)}\r\n                    />\r\n              </div>\r\n              <div className='form-group'>\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder='Password'\r\n                    className='custom-input'\r\n                    value={password}\r\n                    name=\"password\"\r\n                    onChange={(e) => onChange(e)}\r\n                    />\r\n              </div>\r\n              <div className='form-group'>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder='Phone'\r\n                    className='custom-input'\r\n                    value={phone}\r\n                    name=\"phone\"\r\n                    onChange={(e) => onChange(e)}\r\n                    />\r\n              </div>\r\n              <div className='form-submit'>\r\n                  <button\r\n                    className='btn-submit'\r\n                  >\r\n                      REGISTER\r\n                  </button>\r\n              </div>\r\n          </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n  });\r\n  \r\n  export default connect(mapStateToProps, { handleRegister })(Register);\r\n","import React,{useState} from 'react'\r\nimport Login from \"../Login/Login\"\r\nimport Register from \"../Register/Register\"\r\nimport \"./LandingPage.css\"\r\nimport Logo from \"../../img/logo.png\"\r\nconst LandingPage = () => {\r\n    const [handleLogin,setHandleLogin]=useState(false)\r\n  return (\r\n    <div className=\"container-landingpage\">\r\n      <img src={Logo} style={{height:100,width:100,paddingTop:50}}/>\r\n      {!handleLogin && <Login/>}\r\n\r\n      {handleLogin && <Register/>}\r\n\r\n      {!handleLogin && <div>\r\n        <p onClick={()=>setHandleLogin(!handleLogin)}>Dont Have Account ? Click Me</p>\r\n      </div>}\r\n\r\n      {handleLogin && <div>\r\n        <p onClick={()=>setHandleLogin(!handleLogin)}>Have Account ? Click Me</p>\r\n      </div>}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LandingPage\r\n","import React,{useState} from 'react'\r\nimport {postData} from \"../../redux/action/iot\"\r\nimport {connect} from \"react-redux\"\r\nimport \"./PostData.css\"\r\nimport {handleLogout} from \"../../redux/action/auth\"\r\nconst PostData = ({handleLogout,postData,auth:{token},setData,Data}) => {\r\n    const [formData, setFormData] = useState({\r\n        text: \"\",\r\n        type: \"\",\r\n      });\r\n    \r\n      const onChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n      };\r\n      const { text, type } = formData;\r\n      const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        postData(\r\n          text,\r\n          type\r\n        );\r\n        setFormData({\r\n          text: \"\",\r\n          type: \"\",\r\n        })\r\n      };\r\n\r\n      const HandleLogout=()=>{\r\n        handleLogout();\r\n        setData(!Data)\r\n      }\r\n      const onCopy =(e)=>{\r\n        document.execCommand('copy');\r\n        e.target.focus(token)\r\n      }\r\n  return (\r\n    <div className=\"Containet-PostData\">\r\n      <form onSubmit={(e)=>onSubmit(e)}>\r\n              <div className='form-group'>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder='Text'\r\n                    className='custom-input'\r\n                    value={text}\r\n                    name=\"text\"\r\n                    onChange={(e) => onChange(e)}\r\n                    />\r\n              </div>\r\n              <div className='form-group'>\r\n                  <input\r\n                    type=\"type\"\r\n                    placeholder='Type'\r\n                    className='custom-input'\r\n                    value={type}\r\n                    name=\"type\"\r\n                    onChange={(e) => onChange(e)}\r\n                    />\r\n              </div>\r\n              <div className='form-submit'>\r\n                  <button\r\n                    className='btn-submit'\r\n                  >\r\n                      SUBMIT\r\n                  </button>\r\n              </div>\r\n          </form>\r\n          <div style={{paddingTop:200,display: token?'flex':\"default\",paddingLeft:190}}>\r\n           {token && <div style={{paddingRight:10}}>\r\n              <button onClick={() => {navigator.clipboard.writeText(token)}} \r\n           className='btn-submit'\r\n           >\r\n              Copy Token\r\n            </button>\r\n            </div>}\r\n           \r\n            <button  className='btn-submit'\r\n            onClick={()=>HandleLogout()}\r\n            >\r\n                  Logout\r\n            </button>\r\n          </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.Auth,\r\n  });\r\n  \r\n  export default connect(mapStateToProps, { postData,handleLogout })(PostData);\r\n","import {\r\n    GET_DATA_SUCCESS,\r\n    GET_DATA_FAIL,\r\n\r\n    POST_DATA_FAIL,\r\n    POST_DATA_SUCCESS,\r\n\r\n    EDIT_DATA_FAIL,\r\n    EDIT_DATA_SUCCESS,\r\n\r\n    GET_DATA_ID_FAIL,\r\n    GET_DATA_ID_SUCCESS,\r\n\r\n    DELETE_DATA_SUCCESS,\r\n    DELET_DATA_FAIL,\r\n    \r\n    GET_DATA_USER_ID_SUCCESS,\r\n    GET_DATA_USER_ID_FAIL\r\n} from \"./types\"\r\n\r\nimport { API } from \"../../config/api\";\r\n\r\nexport const postData = (\r\n    text,\r\n    type\r\n  ) => async (dispatch) => {\r\n    \r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n      text,\r\n      data:\"0\",\r\n      type,\r\n    });\r\n    try {\r\n       const res = await API.post(\"/data\", body, config);\r\n        dispatch({\r\n          type: POST_DATA_SUCCESS,\r\n          payload: res.data.data\r\n        });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: POST_DATA_FAIL,\r\n          payload: \"error\"\r\n        });\r\n      }\r\n};\r\n\r\nexport const getDataId = (id) => async (dispatch)=>{\r\n  try {\r\n    const res = await API.get(`/data/${id}`);\r\n    dispatch({\r\n      type: GET_DATA_ID_SUCCESS,\r\n      payload: res.data.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_DATA_ID_FAIL,\r\n      payload: err.massage,\r\n    });\r\n  }\r\n}\r\n\r\nexport const getDataUserId=(id)=>async(dispatch)=>{\r\n  try{\r\n    const res = await API.get(`/user/${id}`);\r\n    dispatch({\r\n      type: GET_DATA_USER_ID_SUCCESS,\r\n      payload: res.data.data,\r\n    });\r\n  }catch(err){\r\n    dispatch({\r\n      type: GET_DATA_USER_ID_FAIL,\r\n      payload: err.massage,\r\n    });\r\n  }\r\n}\r\n\r\nexport const editData = (Data,id) => async (dispatch)=>{\r\n    const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n  \r\n      const body = JSON.stringify({\r\n        data:Data\r\n      });\r\n    try {\r\n      const res = await API.patch(`/data/${id}`,body,config);\r\n      dispatch({\r\n        type: EDIT_DATA_SUCCESS,\r\n        payload: res.data.data\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: EDIT_DATA_FAIL,\r\n        payload: 'error',\r\n      });\r\n    }\r\n  }\r\n\r\nexport const getData = () => async (dispatch) =>{\r\n  const res = null\r\n  try{\r\n    res = await API.get(\"/data\");\r\n    dispatch({\r\n      type: GET_DATA_SUCCESS,\r\n      payload: res.data.data\r\n    })\r\n  }catch{\r\n    dispatch({\r\n      type: GET_DATA_FAIL,\r\n      payload: res.data.massage\r\n    })\r\n  }\r\n}\r\n\r\nexport const deletData = (id)=>async(dispatch)=>{\r\n  const res = null\r\n  try{\r\n    res = await API.delete(`/data/${id}`);\r\n    dispatch({\r\n      type: DELETE_DATA_SUCCESS,\r\n      payload:res.data.data\r\n    })\r\n  }catch{\r\n    dispatch({\r\n      type: DELET_DATA_FAIL,\r\n      payload: res.data.massage\r\n    })\r\n  }\r\n}","import React,{useEffect,useState} from 'react'\r\nimport LandingPage from \"../LandingPage/LandingPage\"\r\nimport Logo from \"../../img/logo.png\"\r\nimport {connect} from \"react-redux\"\r\nimport {getDataId,editData,getDataUserId}from \"../../redux/action/iot\"\r\nimport \"./Home.css\"\r\nimport PostData from \"../PostData/PostData\"\r\n\r\n\r\nconst Home = ({getDataUserId,editData,auth:{isAuthenticated,user},Iot:{data_userId}}) => {\r\n  const [Data,setData]=useState(false)\r\n  const [X,setX]=useState(false)\r\n  useEffect(()=>{\r\n    if(user){\r\n      getDataUserId(user.id)\r\n    }       \r\n  },[user,Data,X])\r\n  \r\n  let Dataa = data_userId\r\n\r\n  const HandleEdit=(id,data)=>{\r\n    if(data=== \"0\"){\r\n      editData(\"1\",id)\r\n    }else if(data===\"1\"){\r\n      editData(\"0\",id)\r\n    }\r\n    getDataUserId(user.id);\r\n    setX(!X);\r\n  }\r\n  return (\r\n    <div className=\"container-Home\">\r\n      {isAuthenticated &&<div>\r\n        <img src={Logo} className=\"img-home\" onClick={()=>setData(!Data)}/>\r\n      </div>}\r\n\r\n      {!isAuthenticated &&<div>\r\n        <LandingPage/>\r\n      </div>}\r\n\r\n      {!Data && <div className=\"Body-Home\">\r\n          {user == null? (<div> Loading...</div>):\r\n          (Dataa.map((data)=>\r\n              <div className=\"objeck-render\">\r\n                {\r\n\r\n                data.type == \"Button\" ? \r\n                (<button\r\n                  onClick={()=>HandleEdit(data.id,data.data)}\r\n                  style={{background: data.data === \"0\"?\"white\":\"grey\"}}\r\n                >{data.text}\r\n                <p>{data.id}</p>\r\n                </button>):\r\n\r\n                data.type == \"Input\" ?\r\n                (<div>\r\n                    <input\r\n                  placeholder={data.text}\r\n                  />\r\n                  <div style={{paddingTop:10}}>\r\n                    <button style={{minWidth:50}}>\r\n                      Kirim\r\n                    </button>\r\n                  </div>\r\n                </div>):\r\n                null\r\n                }\r\n              </div>\r\n            ))}\r\n      </div>}\r\n\r\n      {Data && <PostData setData={setData} Data={Data}/>\r\n\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.Auth,\r\n  Iot: state.Iot\r\n});\r\n\r\nexport default connect(mapStateToProps, { getDataId,editData,getDataUserId})(Home);\r\n","import React,{useEffect} from 'react';\nimport './App.css';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store/store\";\nimport logo from './img/logo.png'\nimport { loadUser } from \"./redux/action/auth\";\nimport { setAuthToken } from \"./config/api\";\nimport Home from './component/Home/Home'\n\nif (localStorage.token) {\n  setAuthToken(localStorage.token);\n}\n\nfunction App() {\n\n  useEffect(() => {\n    store.dispatch(loadUser());\n    }, []);\n  return (\n    <Provider store={store}>\n     <div className=\"App\">\n        <Home/>\n     </div>\n    </Provider>\n  );\n}\n\nexport default (App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.c1cc3d53.png\";"],"sourceRoot":""}