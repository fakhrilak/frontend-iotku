{"version":3,"sources":["img/logo.png","config/api.js","component/Button/Button.js","redux/action/iot.js","redux/action/types.js","redux/reducer/iot.js","redux/reducer/index.js","redux/store/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API","axios","create","baseURL","connect","state","Iots","Iot","editData","Data","dispatch","a","config","headers","body","JSON","stringify","text","data","patch","res","type","payload","getData","get","useState","cont","setCount","title","setTitle","className","onClick","handleClick","initialState","loading","error","combineReducers","action","user","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","React","count","src","logo","style","height","width","paddingTop","paddingLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,oOCE9BC,E,OAAMC,EAAMC,OAAO,CAC/BC,QAAS,iD,OCgCKC,eAHS,SAACC,GAAD,MAAY,CAClCC,KAAMD,EAAME,OAE0B,CAAEC,SCsBlB,SAACC,GAAD,8CAAU,WAAOC,GAAP,mBAAAC,EAAA,6DACxBC,EAAS,CACXC,QAAS,CACP,eAAgB,qBAIdC,EAAOC,KAAKC,UAAU,CAC1BC,KAAK,cACLC,KAAKT,IATqB,kBAYVT,EAAImB,MAAJ,UAAoBL,EAAKF,GAZf,OAYtBQ,EAZsB,OAa5BV,EAAS,CACPW,KCjEyB,oBDkEzBC,QAASF,IAfiB,gDAkB5BV,EAAS,CACPW,KCrEsB,iBDsEtBC,QAAS,UApBiB,yDAAV,uDDtB2BC,QCO5B,yDAAM,WAAOb,GAAP,eAAAC,EAAA,+EAEPX,EAAIwB,IAAI,WAFD,OAEnBJ,EAFmB,OAGzBV,EAAS,CACPW,KC3C0B,mBD4C1BC,QAASF,EAAIF,OALU,gDAQzBR,EAAS,CACPW,KC/CuB,gBDgDvBC,QAAS,UAVc,yDAAN,wDDPRlB,EA7BA,SAAC,GAAwB,IAAvBI,EAAsB,EAAtBA,SAAsB,KAAbe,QACFE,oBAAS,IADM,mBAC9BC,EAD8B,KACzBC,EADyB,OAEdF,mBAAS,IAFK,mBAE9BG,EAF8B,KAExBC,EAFwB,KAgBrC,OACE,yBAAKC,UAAU,oBACX,6BACI,4BAAKF,GACL,4BAAQG,QAAS,kBAhBR,WACjBJ,GAAUD,GACV,IAAIR,EAAO,KACD,GAAPQ,GACDR,EAAO,EACPW,EAAS,SACM,GAARH,IACPR,EAAO,EACPW,EAAS,SAEXrB,EAASU,GAMoBc,KAArB,c,uCGhBNC,EAAe,CACjBC,SAAS,EACThB,KAAM,GACNiB,MAAM,MCPKC,4BAAgB,CAAC7B,IDUf,WAAyC,IAA/BF,EAA8B,uDAAtB4B,EAAcI,EAAQ,uCAC7ChB,EAAkBgB,EAAlBhB,KAAMC,EAAYe,EAAZf,QAEd,OAAQD,GACN,IDjB0B,mBCkBxB,OAAO,2BACFhB,GADL,IAEE6B,SAAS,EACTI,KAAMhB,IAEX,IDtBwB,gBCuBxB,ID3B4B,oBC4B5B,ID3ByB,iBC4BzB,IDvB4B,oBCwB5B,IDvByB,iBCwB1B,QACI,OAAOjB,MEzBTkC,EAAa,CAAEC,KAQNC,EANDC,sBACbC,EALoB,GAOpBC,8BAAoBC,kBAAe,WAAf,EAAmBN,K,iBCOzBO,MAbf,WAAgB,IAAD,EACUC,IAAMtB,SAAS,GADzB,mBACNuB,EADM,KACArB,EADA,KAGb,OACE,kBAAC,IAAD,CAAUc,MAAOA,GACf,yBAAKQ,IAAKC,IAAMC,MAAO,CAACC,OAAO,GAAGC,MAAM,GAAGC,WAAW,GAAGC,YAAY,MACvE,yBAAKzB,UAAU,oBACb,kBAAC,EAAD,CAAQH,SAAUA,EAAUqB,MAAOA,OCDrBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.642bbe5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c1cc3d53.png\";","import axios from 'axios';\r\n// Set config defaults when creating the instance\r\nexport const API = axios.create({\r\n\tbaseURL: 'https://fakhrilak-iotku.herokuapp.com/iot/v1'\r\n\t//baseURL: 'http://localhost:5000/api/ts-009/'\r\n});","import React from 'react'\r\nimport \"./Button.css\"\r\nimport {editData,getData} from '../../redux/action/iot'\r\nimport {connect}from 'react-redux'\r\nimport { useState } from 'react'\r\n\r\nconst Button = ({editData,getData}) => {\r\n  const [cont,setCount]=useState(false)\r\n  const [title,setTitle]=useState('')\r\n\r\n  const handleClick =()=>{\r\n    setCount(!cont)\r\n    let data = null\r\n    if(cont== false){\r\n      data = 0\r\n      setTitle('MATI')\r\n    }else if(cont == true){\r\n      data = 1\r\n      setTitle('URIP')\r\n    }\r\n    editData(data)\r\n  }\r\n  return (\r\n    <div className=\"Container-button\">\r\n        <div>\r\n            <h1>{title}</h1>\r\n            <button onClick={()=>handleClick()}>Zilog</button>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  Iots: state.Iot\r\n});\r\nexport default connect(mapStateToProps, { editData,getData })(Button);\r\n","import {\r\n    GET_DATA_SUCCESS,\r\n    GET_DATA_FAIL,\r\n    POST_DATA_FAIL,\r\n    POST_DATA_SUCCESS,\r\n    EDIT_DATA_FAIL,\r\n    EDIT_DATA_SUCCESS\r\n    \r\n} from \"./types\"\r\n\r\nimport { API } from \"../../config/api\";\r\n\r\nexport const postData = (\r\n    text,\r\n    data,\r\n  ) => async (dispatch) => {\r\n    \r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n      text,\r\n      data\r\n    });\r\n\r\n    try {\r\n        const res = await API.post(\"/data\", body, config);\r\n        dispatch({\r\n          type: POST_DATA_SUCCESS,\r\n          payload: res\r\n        });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: POST_DATA_FAIL,\r\n          payload: 'error'\r\n        });\r\n      }\r\n};\r\n\r\nexport const getData = () => async (dispatch)=>{\r\n  try {\r\n    const res = await API.get(\"/data/1\");\r\n    dispatch({\r\n      type: GET_DATA_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_DATA_FAIL,\r\n      payload: 'error',\r\n    });\r\n  }\r\n}\r\n\r\nexport const editData = (Data) => async (dispatch)=>{\r\n    const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n  \r\n      const body = JSON.stringify({\r\n        text:\"hello world\",\r\n        data:Data\r\n      });\r\n    try {\r\n      const res = await API.patch(`/data/1`,body,config);\r\n      dispatch({\r\n        type: EDIT_DATA_SUCCESS,\r\n        payload: res,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: EDIT_DATA_FAIL,\r\n        payload: 'error',\r\n      });\r\n    }\r\n  }","export const POST_DATA_SUCCESS = 'POST_DATA_SUCCESS';\r\nexport const POST_DATA_FAIL = \"POST_DATA_FAIL\";\r\n\r\nexport const GET_DATA_SUCCESS = \"GET_DATA_SUCCESS\";\r\nexport const GET_DATA_FAIL = \"GET_DATA_FAIL\";\r\n\r\nexport const EDIT_DATA_SUCCESS = \"EDIT_DATA_SUCCESS\";\r\nexport const EDIT_DATA_FAIL = \"EDIT_DATA_FAIL\";","import {\r\n    GET_DATA_SUCCESS,\r\n    GET_DATA_FAIL,\r\n    POST_DATA_FAIL,\r\n    POST_DATA_SUCCESS,\r\n    EDIT_DATA_FAIL,\r\n    EDIT_DATA_SUCCESS\r\n    \r\n} from \"../action/types\"\r\n\r\nconst initialState = {\r\n    loading: true,\r\n    data: [],\r\n    error:null,\r\n  };\r\n\r\n  export default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n  \r\n    switch (type) {\r\n      case GET_DATA_SUCCESS:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n          user: payload,\r\n        };\r\n     case GET_DATA_FAIL:\r\n     case POST_DATA_SUCCESS:\r\n     case POST_DATA_FAIL:\r\n     case EDIT_DATA_SUCCESS:\r\n     case EDIT_DATA_FAIL:\r\n    default:\r\n        return state;\r\n    }\r\n  }\r\n  ","import { combineReducers } from \"redux\";\r\n\r\n\r\nimport Iot from \"./iot\";\r\n\r\n\r\nexport default combineReducers({Iot});","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducer';\r\n\r\nconst initialState = {}; \r\n\r\nconst middleware = [ thunk ];\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tinitialState,\r\n\tcomposeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport Button from \"./component/Button/Button\"\nimport './App.css';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store/store\";\nimport logo from './img/logo.png'\nfunction App() {\n  const [count,setCount]=React.useState(0)\n\n  return (\n    <Provider store={store}>\n      <img src={logo} style={{height:60,width:60,paddingTop:50,paddingLeft:50}}/>\n    <div className=\"Container-button\"> \n      <Button setCount={setCount} count={count}/>   \n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}